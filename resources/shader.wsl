//struct VertexInput {
	//@location(0) position: vec3<f32>,
	//@location(1) normal: vec3<f32>,
	//@location(2) color: vec3<f32>,
	//@location(3) uv: vec2<f32>,
//}

struct VertexOutput {
	@builtin(position) position: vec4<f32>,
	//@location(0) color: vec3<f32>,
	//@location(1) normal: vec3<f32>,
	//@location(2) uv: vec2<f32>,
}

/**
 * A structure holding the value of our uniforms
 */
struct MyUniforms {
	projectionMatrix: mat4x4<f32>,
	viewMatrix: mat4x4<f32>,
	modelMatrix: mat4x4<f32>,
	color: vec4<f32>,
	time: f32,
}

struct TetVertsPos {
	pos: array<vec4<f32>, 4>,
}

/**
 * A structure holding the lighting settings
 */
struct LightingUniforms {
	directions: array<vec4<f32>, 2>,
	colors: array<vec4<f32>, 2>,
}

// Instead of the simple uTime variable, our uniform variable is a struct
@group(0) @binding(0) var<uniform> uMyUniforms: MyUniforms;
@group(1) @binding(0) var<storage,read> in_buf_tet_verts_worldpos: array<TetVertsPos>;
//@group(0) @binding(3) var<uniform> uLighting: LightingUniforms;

//@group(0) @binding(1) var textureSampler: sampler;
//@group(0) @binding(2) var baseColorTexture: texture_2d<f32>;

@vertex
fn vs_main(
	@builtin(vertex_index) in_vertex_index: u32,
	@builtin(instance_index) in_instance_index: u32,
) -> VertexOutput {
	var out: VertexOutput;
	let vpos = in_buf_tet_verts_worldpos[in_instance_index].pos[in_vertex_index];
	out.position = uMyUniforms.projectionMatrix * uMyUniforms.viewMatrix * uMyUniforms.modelMatrix * vpos;
	return out;
}

@fragment
fn fs_main(in: VertexOutput) -> @location(0) vec4<f32> {
	// Combine texture and lighting
	let color = vec3<f32>(0.8, 0.7, 0.6);

	// Gamma-correction
	let corrected_color = pow(color, vec3<f32>(2.2));
	return vec4<f32>(corrected_color, uMyUniforms.color.a);
}

