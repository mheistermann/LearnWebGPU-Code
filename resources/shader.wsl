struct VertexInput {
	@location(0) position: vec3<f32>,
	@location(1) color: vec3<f32>,
};

struct VertexOutput {
	@builtin(position) position: vec4<f32>,
	@location(0) color: vec3<f32>,
};

/**
 * A structure holding the value of our uniforms
 */
struct MyUniforms {
	color: vec4<f32>,
	time: f32,
};

// Instead of the simple uTime variable, our uniform variable is a struct
@group(0) @binding(0) var<uniform> uMyUniforms: MyUniforms;

@vertex
fn vs_main(in: VertexInput) -> VertexOutput {
	var out: VertexOutput;
	let ratio = 640.0 / 480.0;
	let angle = uMyUniforms.time; // you can multiply it go rotate faster
	// The correct mixing weights are given by the trigonometric functions cosine and sine
	let alpha = cos(angle);
	let beta = sin(angle);
	var position = vec3<f32>(
		in.position.x,
		alpha * in.position.y + beta * in.position.z, // add a bit of Z in Y...
		alpha * in.position.z - beta * in.position.y, // ...and a bit of Y in Z.
	);
	out.position = vec4<f32>(position.x, position.y * ratio, position.z * 0.5 + 0.5, 1.0);
	out.color = in.color;
	return out;
}

@fragment
fn fs_main(in: VertexOutput) -> @location(0) vec4<f32> {
	let color = in.color * uMyUniforms.color.rgb;
	// Gamma-correction
	let corrected_color = pow(color, vec3<f32>(2.2));
	return vec4<f32>(corrected_color, uMyUniforms.color.a);
}
