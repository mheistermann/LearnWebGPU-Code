struct VertexOutput {
	@builtin(position) position: vec4<f32>,
}

/**
 * A structure holding the value of our uniforms
 */
struct MyUniforms {
	projectionMatrix: mat4x4<f32>,
	viewMatrix: mat4x4<f32>,
	modelMatrix: mat4x4<f32>,
	color: vec4<f32>,
	time: f32,
}

struct TetVerts {
	idx: vec4<u32>,
}
struct VertexPos {
	pos: vec3<f32>,
}

struct TetVertsPos {
	pos: array<vec4<f32>, 4>,
}


@group(0) @binding(0) var<storage,read> inbuf_vpos: array<VertexPos>;
@group(0) @binding(1) var<storage,read> inbuf_tet: array<TetVerts>;
// only written to, but there seems to be no write-only binding type for buffers:
@group(1) @binding(0) var<storage,read_write> outbuf_tet_verts : array<TetVertsPos>;

@compute @workgroup_size(32)
fn computeTetVerts(
	@builtin(global_invocation_id) id: vec3<u32>)
{
	// TOOD: shrink, etc
	let tet_id = id.x;
	let vids = inbuf_tet[tet_id].idx;
	var tmp: TetVertsPos;
	for(var i:i32 = 0; i < 4; i++) {
		tmp.pos[i] = vec4<f32>(inbuf_vpos[vids[i]].pos, 1.0);
	}
	outbuf_tet_verts[tet_id] = tmp;
    // Compute stuff
}

struct TetPrecomputeData {
	baca: vec3<f32>, // (b-a) x (c-a)
	cdbd: vec3<f32>,
	daba: vec3<f32>,
	cada: vec3<f32>,
}


/*
@group(0) @binding(0) var<storage,read> inbuf_tet_verts : array<TetVertsPos>;
@group(1) @binding(0) var<storage,read_write> outbuf_tet_precomp : array<TetPrecomputeData>;

@compute @workgroup_size(32)
fn precomputeTet(
	@builtin(global_invocation_id) id: vec3<u32>)
{
	let tet_id = id.x;
	let tet = outbuf_tet_verts[tet_id];
	let a = tet.pos[0];
	let b = tet.pos[1];
	let c = tet.pos[2];
	let d = tet.pos[3];
	let ba = b-a;
	let ca = c-a;
	let da = d-a;
	let cd = c-d;
	let bd = b-d;
	var tmp: TetPrecomputeData;
	tmp.baca = cross(ba, ca);
	tmp.cdbd = cross(cd, bd);
	tmp.daba = cross(da, ba);
	tmp.cada = cross(ca, da);
	outbuf_tet_precomp[tet_id] = tmp;
}

struct TetPrecomputeDataViewDep {
	cramer_t_nom: vec4<f32>,
}

@group(0) @binding(0) var<uniform> camera_origin : vec3<f32>;
@group(1) @binding(0) var<storage,read> inbuf_tet_verts : array<TetVertsPos>;
@group(1) @binding(2) var<storage,read> inbuf_tet_precomp : array<TetPrecomputeData>;
@group(2) @binding(3) var<storage,read_write> outbuf_tet_precomp_viewdep : array<TetPrecomputeDataViewDep>;
@compute @workgroup_size(32)
fn precomputeTetViewDep(
	@builtin(global_invocation_id) id: vec3<u32>)
{
	let tet_id = id.x;
	var pc = inbuf_tet_precomp[tet_id];
	var tmp: TetPrecomputeDataViewDep;
	var ctn: vec4<f32>;
	let o = camera_origin;
	let a = inbuf_tet_verts[tet_id].pos[0];
	let d = inbuf_tet_verts[tet_id].pos[3];
	outbuf_tet_precomp_viewdep[tet_id].cramer_t_nom = vec4<f32>(
		dot(pc.baca, o-a),
		dot(pc.cdbd, o-d),
		dot(pc.daba, o-a),
		dot(pc.cada, o-a));
}
*/

/**
 * A structure holding the lighting settings
 */
struct LightingUniforms {
	directions: array<vec4<f32>, 2>,
	colors: array<vec4<f32>, 2>,
}

// Instead of the simple uTime variable, our uniform variable is a struct
@group(0) @binding(0) var<uniform> uMyUniforms: MyUniforms;
@group(1) @binding(0) var<storage,read> inbuf_tet_verts: array<TetVertsPos>;
//@group(1) @binding(1) var<storage,read> inbuf_tet_precomp : array<TetPrecomputeData>;
//@group(0) @binding(3) var<uniform> uLighting: LightingUniforms;

//@group(0) @binding(1) var textureSampler: sampler;
//@group(0) @binding(2) var baseColorTexture: texture_2d<f32>;

@vertex
fn vs_main(
	@builtin(vertex_index) in_vertex_index: u32,
	@builtin(instance_index) in_instance_index: u32,
) -> VertexOutput {
	var out: VertexOutput;
	let vpos = inbuf_tet_verts[in_instance_index].pos[in_vertex_index];
	out.position = uMyUniforms.projectionMatrix * uMyUniforms.viewMatrix * uMyUniforms.modelMatrix * vpos;
	return out;
}

@fragment
fn fs_main(in: VertexOutput) -> @location(0) vec4<f32> {
	// Combine texture and lighting
	let color = vec3<f32>(0.8, 0.7, 0.6);

	// Gamma-correction
	let corrected_color = pow(color, vec3<f32>(2.2));
	return vec4<f32>(corrected_color, uMyUniforms.color.a);
}

