
struct TetVerts {
	idx: vec4<u32>,
	//idx: u32,
}
struct VertexPos {
	pos: vec3<f32>,
}

struct TetVertsPos {
	pos: array<vec4<f32>, 4>,
}

@group(0) @binding(0) var<storage,read> inbuf_vpos: array<VertexPos>;
@group(0) @binding(1) var<storage,read> inbuf_tet: array<TetVerts>;
// only written to, but there seems to be no write-only binding type for buffers:
@group(1) @binding(0) var<storage,read_write> outbuf_tet_verts : array<TetVertsPos>;

@compute @workgroup_size(32)
fn computeTetVerts(
	@builtin(global_invocation_id) id: vec3<u32>)
{
	// TOOD: shrink, etc
	let tet_id = id.x;
	let vids = inbuf_tet[tet_id].idx;
	var tmp: TetVertsPos;
	for(var i:i32 = 0; i < 4; i++) {
		tmp.pos[i] = vec4<f32>(inbuf_vpos[vids[i]].pos, 1.0);
	}
	outbuf_tet_verts[tet_id] = tmp;
    // Compute stuff
}
